from telebot.types import Message
from telebot import types

from modules.common import bot, users, settings_messages, update_user
from modules.handlers import inline_buttons_handler
from modules.buttons import (gender_selection, s_user_gender_selection, s_user_age_selection, s_partner_gender_selection, 
                     s_partner_age_selection, buttons_editing)

def is_registered(user_id):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ 
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç.

    :param user_id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä 
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    for user, user_params in list(users.items()):

        user_gender = user_params['user_gender']
        user_age = user_params['user_age']
        user_partner_gender = user_params['partner_gender']
        user_partner_age = user_params['partner_age']

        if (user == user_id and user_gender is not None and user_age is not None 
                and user_partner_gender is not None and user_partner_age is not None):
            return True
        
    return False


@bot.message_handler(commands=['start'])
def send_welcome(message: Message):
    user_id = message.from_user.id

    if is_registered(user_id):
        bot.send_message(message.chat.id, "–†–∞–¥—ã —Å–Ω–æ–≤–∞ –í–∞—Å –≤–∏–¥–µ—Ç—å! üëãüèª\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, "
                                           "–≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /settings –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /next, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. "
                                           "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /stats.")
        return
    
    update_user(user_id, user_gender=None, user_age=None, like=0, dislike=0, partner_gender=None, partner_age=None, 
                partner_id=None, last_partner_id=None, is_looking=False)
    
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç-–±–æ—Ç–µ! üëãüèª\n\n"
                                       "–î–ª—è –Ω–∞—á–∞–ª–∞ –í–∞–º —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –í–∞—à –ø–æ–ª:", reply_markup=gender_selection)


@bot.message_handler(commands=['stop'])
def end_conversation(message: Message):
    user_id = None

    try:
        user_id = message.from_user.id
        partner_id = users[user_id]['partner_id']
        
        user_gender = users[user_id]['user_gender']
        user_age = users[user_id]['user_age']
        user_like = users[user_id]['like']
        user_dislike = users[user_id]['dislike']
        user_partner_gender = users[user_id]['partner_gender']
        user_partner_age = users[user_id]['partner_age']
    
        if users[user_id]['is_looking']:

            bot.send_message(user_id, "‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /next, "
                                      "–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ - /settings.")

            update_user(user_id, user_gender=user_gender, user_age=user_age, like=user_like, dislike=user_dislike, 
                        partner_gender=user_partner_gender, partner_age=user_partner_age, partner_id=None, last_partner_id=None, is_looking=False)
        
        elif partner_id is not None:

            partner_gender = users[partner_id]['user_gender']
            partner_age = users[partner_id]['user_age']
            partner_like = users[partner_id]['like']
            partner_dislike = users[partner_id]['dislike']
            partner_partner_gender = users[partner_id]['partner_gender']
            partner_partner_age = users[partner_id]['partner_age']

            user_opinion = types.InlineKeyboardMarkup()
            user_opinion_like = types.InlineKeyboardButton(f"‚ù§Ô∏è {partner_like}", callback_data="like")
            user_opinion_dislike = types.InlineKeyboardButton(f"üëé {partner_dislike}", callback_data="dislike")
            user_opinion.add(user_opinion_like, user_opinion_dislike)

            bot.send_message(user_id, "‚úÖ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /next.")
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ.", reply_markup=user_opinion)

            partner_opinion = types.InlineKeyboardMarkup()
            partner_opinion_like = types.InlineKeyboardButton(f"‚ù§Ô∏è {user_like}", callback_data="like")
            partner_opinion_dislike = types.InlineKeyboardButton(f"üëé {user_dislike}", callback_data="dislike")
            partner_opinion.add(partner_opinion_like, partner_opinion_dislike)

            bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /next. üòî")
            bot.send_message(partner_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ.", reply_markup=partner_opinion)

            update_user(user_id, user_gender=user_gender, user_age=user_age, like=user_like, dislike=user_dislike, 
                        partner_gender=user_partner_gender, partner_age=user_partner_age, partner_id=None, 
                        last_partner_id=partner_id, is_looking=False)
        
            update_user(partner_id, user_gender=partner_gender, user_age=partner_age, like=partner_like, dislike=partner_dislike, 
                        partner_gender=partner_partner_gender, partner_age=partner_partner_age, partner_id=None, 
                        last_partner_id=user_id, is_looking=False)
        else:
            bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    except KeyError:
        if user_id is not None:
            bot.send_message(user_id, "‚ö†Ô∏è –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ –í–∞–º –Ω—É–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")


@bot.message_handler(commands=['settings'])
def edit_settings(message: Message):

    if is_registered(message.from_user.id):
        return bot.send_message(message.chat.id, "–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=buttons_editing)

    return bot.send_message(message.from_user.id, "‚ö†Ô∏è –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ –í–∞–º –Ω—É–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")


@bot.message_handler(commands=['stats'])
def show_statistics(message: Message):
    user_id = None

    try:
        user_id = message.from_user.id
        user_name = message.from_user.full_name

        partner_id = users[user_id]['partner_id']

        user_gender = users[user_id]['user_gender']
        user_age = users[user_id]['user_age']
        user_like = users[user_id]['like']
        user_dislike = users[user_id]['dislike']
        user_partner_gender = users[user_id]['partner_gender']
        user_partner_age = users[user_id]['partner_age']

        has_partner = "–î–∞" if partner_id is not None else "–ù–µ—Ç"

        bot.send_message(user_id, f"<b>{user_name}</b>, –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—Å.\n\n"
                                   f"<i>–í–∞—à –ø–æ–ª: {user_gender}.\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {user_age}.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤: {user_like}.\n"
                                   f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤: {user_dislike}.\n–ñ–µ–ª–∞–µ–º—ã–π –ø–æ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user_partner_gender}.\n"
                                   f"–ñ–µ–ª–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user_partner_age}.\n"
                                   f"–ò–º–µ–µ—Ç—Å—è –ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {has_partner}.</i>", parse_mode="html")
    except KeyError:
        if user_id is not None:
            bot.send_message(user_id, "‚ö†Ô∏è –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ –í–∞–º –Ω—É–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")


@bot.message_handler(content_types=['text', 'voice', 'photo', 'video', 'video_note', 'sticker', 'animation'])
def send_message_partner(message: Message):
    user_id = None

    try:
        user_id = message.from_user.id
        partner_id = users[user_id]['partner_id']

        if (message.text == settings_messages[0] 
                or message.text == settings_messages[1] or message.text == settings_messages[2] 
                or message.text == settings_messages[3] or message.text == settings_messages[4]):
            if partner_id is not None or users[user_id]['is_looking']:
                bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ–±—â–µ–Ω–∏—è.")
                return

            bot.message_handler()
            (button_handler(message))
            return

        if partner_id is not None:
            if message.text:
                bot.send_message(partner_id, message.text)
            elif message.voice:
                bot.send_voice(partner_id, message.voice.file_id)
            elif message.photo:
                bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption)
            elif message.video:
                bot.send_video(partner_id, message.video.file_id, caption=message.caption)
            elif message.video_note:
                bot.send_video_note(partner_id, message.video_note.file_id)
            elif message.sticker:
                bot.send_sticker(partner_id, message.sticker.file_id)
            elif message.animation:
                bot.send_animation(partner_id, message.animation.file_id)
        else:
            bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    except KeyError:
        if user_id is not None:
            bot.send_message(user_id, "‚ö†Ô∏è –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ –í–∞–º –Ω—É–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start.")


@bot.message_handler(content_types=['text'])
def button_handler(message: Message):
    if message.text == settings_messages[0]:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –Ω–æ–≤—ã–π –ø–æ–ª:", reply_markup=s_user_gender_selection)
    elif message.text == settings_messages[1]:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=s_user_age_selection)
    elif message.text == settings_messages[2]:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=s_partner_gender_selection)
    elif message.text == settings_messages[3]:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=s_partner_age_selection)
    elif message.text == settings_messages[4]:
        bot.message_handler()
        (show_statistics(message))


(bot.callback_query_handler()
(inline_buttons_handler))

bot.infinity_polling()